{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from __future__ import print_function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing import sequence\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Embedding\n",
    "from tensorflow.keras.layers import LSTM\n",
    "from tensorflow.keras.datasets import imdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_features = 10000\n",
    "# cut texts after this number of words (among top max_features most common words)\n",
    "maxlen = 80\n",
    "batch_size = 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading data...\n",
      "25000 train sequences\n",
      "25000 test sequences\n"
     ]
    }
   ],
   "source": [
    "# from pickle import load\n",
    "# with open('./data.pkl', 'rb') as f:\n",
    "#     train_data, train_labels, test_data, test_labels = load(f)\n",
    "from warnings import catch_warnings, simplefilter\n",
    "print('Loading data...')\n",
    "with catch_warnings():\n",
    "    simplefilter('ignore')\n",
    "    (x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n",
    "print(len(x_train), 'train sequences')\n",
    "print(len(x_test), 'test sequences')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pad sequences (samples x time)\n",
      "x_train shape: (25000, 80)\n",
      "x_test shape: (25000, 80)\n"
     ]
    }
   ],
   "source": [
    "print('Pad sequences (samples x time)')\n",
    "x_train = sequence.pad_sequences(x_train, maxlen=maxlen)\n",
    "x_test = sequence.pad_sequences(x_test, maxlen=maxlen)\n",
    "print('x_train shape:', x_train.shape)\n",
    "print('x_test shape:', x_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Build model...\n"
     ]
    }
   ],
   "source": [
    "print('Build model...')\n",
    "model = Sequential()\n",
    "model.add(Embedding(max_features, 128))\n",
    "model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# try using different optimizers and different optimizer configs\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train...\n",
      "Train on 25000 samples, validate on 25000 samples\n",
      "Epoch 1/15\n",
      "25000/25000 [==============================] - 177s 7ms/sample - loss: 0.4545 - accuracy: 0.7878 - val_loss: 0.3914 - val_accuracy: 0.8293\n",
      "Epoch 2/15\n",
      "25000/25000 [==============================] - 128s 5ms/sample - loss: 0.3102 - accuracy: 0.8694 - val_loss: 0.3671 - val_accuracy: 0.8386\n",
      "Epoch 3/15\n",
      "25000/25000 [==============================] - 123s 5ms/sample - loss: 0.2419 - accuracy: 0.9023 - val_loss: 0.3960 - val_accuracy: 0.8295\n",
      "Epoch 4/15\n",
      "25000/25000 [==============================] - 129s 5ms/sample - loss: 0.1923 - accuracy: 0.9258 - val_loss: 0.4551 - val_accuracy: 0.8350\n",
      "Epoch 5/15\n",
      "25000/25000 [==============================] - 122s 5ms/sample - loss: 0.1469 - accuracy: 0.9444 - val_loss: 0.4576 - val_accuracy: 0.8300\n",
      "Epoch 6/15\n",
      "25000/25000 [==============================] - 121s 5ms/sample - loss: 0.1109 - accuracy: 0.9591 - val_loss: 0.6462 - val_accuracy: 0.8265\n",
      "Epoch 7/15\n",
      "25000/25000 [==============================] - 122s 5ms/sample - loss: 0.0824 - accuracy: 0.9718 - val_loss: 0.6849 - val_accuracy: 0.8268\n",
      "Epoch 8/15\n",
      "25000/25000 [==============================] - 118s 5ms/sample - loss: 0.0728 - accuracy: 0.9753 - val_loss: 0.6878 - val_accuracy: 0.8241\n",
      "Epoch 9/15\n",
      "25000/25000 [==============================] - 121s 5ms/sample - loss: 0.0594 - accuracy: 0.9803 - val_loss: 0.6868 - val_accuracy: 0.8218\n",
      "Epoch 10/15\n",
      "25000/25000 [==============================] - 124s 5ms/sample - loss: 0.0422 - accuracy: 0.9862 - val_loss: 0.7369 - val_accuracy: 0.8206\n",
      "Epoch 11/15\n",
      "25000/25000 [==============================] - 124s 5ms/sample - loss: 0.0369 - accuracy: 0.9883 - val_loss: 0.8762 - val_accuracy: 0.8175\n",
      "Epoch 12/15\n",
      "25000/25000 [==============================] - 123s 5ms/sample - loss: 0.0291 - accuracy: 0.9907 - val_loss: 0.9176 - val_accuracy: 0.8214\n",
      "Epoch 13/15\n",
      "25000/25000 [==============================] - 122s 5ms/sample - loss: 0.0280 - accuracy: 0.9907 - val_loss: 0.9166 - val_accuracy: 0.8190\n",
      "Epoch 14/15\n",
      "25000/25000 [==============================] - 119s 5ms/sample - loss: 0.0228 - accuracy: 0.9930 - val_loss: 0.9303 - val_accuracy: 0.8142\n",
      "Epoch 15/15\n",
      "25000/25000 [==============================] - 117s 5ms/sample - loss: 0.0173 - accuracy: 0.9943 - val_loss: 1.0185 - val_accuracy: 0.8159\n",
      "25000/25000 [==============================] - 17s 675us/sample - loss: 1.0185 - accuracy: 0.8159\n",
      "Test score: 1.0185305881679059\n",
      "Test accuracy: 0.81588\n"
     ]
    }
   ],
   "source": [
    "print('Train...')\n",
    "model.fit(x_train, y_train,\n",
    "          batch_size=batch_size,\n",
    "          epochs=15,\n",
    "          validation_data=(x_test, y_test))\n",
    "score, acc = model.evaluate(x_test, y_test,\n",
    "                            batch_size=batch_size)\n",
    "print('Test score:', score)\n",
    "print('Test accuracy:', acc)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
